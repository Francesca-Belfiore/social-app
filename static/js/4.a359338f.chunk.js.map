{"version":3,"sources":["components/date.jsx","components/FriendPreview/index.jsx","components/FriendPreview/FriendPreview.module.scss","components/MessagePreview/index.jsx","components/MessagePreview/MessagePreview.module.scss","pages/Home/Home.module.scss","components/Post/Post.module.scss","components/Post/index.jsx","pages/Home/index.jsx"],"names":["RelativeDate","date","formatDistance","Date","addSuffix","locale","it","toLocaleTimeString","FriendPreview","props","data","name","photo","className","styles","friend","src","alt","module","exports","MessagePreview","text","sender","message","Post","author","useState","modalIsOpen","setIsOpen","post","deleteBtn","onClick","httpDELETE","id","then","setTimeout","Modal","color","top","friends","messages","posts","Home","allPosts","setAllPosts","messagesPreview","setMessagesPreview","friendsPreview","setFriendsPreview","useEffect","http","reverse","home","grid","map","index","to","createPostBtn"],"mappings":"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","file":"static/js/4.a359338f.chunk.js","sourcesContent":["import { formatDistance } from \"date-fns\"; //formatta le date in modo \"umano\"\nimport { it } from \"date-fns/locale\"; //traduce le stringhe delle date in ita\n\nconst RelativeDate = ({date}) => (\n    <p> \n        {date ? \n            <small>\n                {formatDistance(new Date(date), new Date(), {addSuffix: true, locale: it})} - {new Date(date).toLocaleTimeString()}\n            </small> : <></> }\n    </p>\n);\n\nexport default RelativeDate;","import styles from \"./FriendPreview.module.scss\";\n\nconst FriendPreview = (props) => {\n    const data = props.data || {\n        name: \"Friend\",\n        photo: \"https://randomuser.me/api/portraits/women/59.jpg\",\n    };\n\n    return (\n        <div className={styles.friend}>\n            <img src={data.photo} alt={data.name}/>\n            <p>{data.name}</p>\n        </div>\n    );\n};\n\nexport default FriendPreview;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"FriendPreview_friend__3Gjby\"};","import styles from \"./MessagePreview.module.scss\";\nimport RelativeDate from \"../date\";\n\n\nconst MessagePreview = (props) => {\n    const data = props.data || {\n        text: \"lorem ipsum\",\n        date: new Date(),\n        sender: \"User\"\n    };\n\n    return (\n        <div className={styles.message}>\n            <h5>{data.sender}</h5>\n            <RelativeDate date={data.date}/>\n            <p>{data.text}</p>\n        </div>\n    );\n};\n\nexport default MessagePreview;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"MessagePreview_message__3j9dl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__1JXvv\",\"grid\":\"Home_grid__sUtIT\",\"createPostBtn\":\"Home_createPostBtn__1BGTQ\",\"friend\":\"Home_friend__eOEhP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3hqZB\",\"deleteBtn\":\"Post_deleteBtn__1bIB2\"};","import { useState } from \"react\";\nimport RelativeDate from \"../date\";\nimport { httpDELETE } from \"../../libs/http\";\nimport Modal from \"../Modal\";\nimport styles from \"./Post.module.scss\";\n\nconst Post = (props) => {\n    const data = props.data || {\n        author: \"User\",\n        text: \"text\",\n        date: new Date(), \n        photo: \n            \"https://images.unsplash.com/photo-1620481679288-0c3894901bcf?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=640&q=80\" \n    };\n\n    //MODAL\n    const [modalIsOpen, setIsOpen] = useState(false);\n\n    function showModal() {\n        setIsOpen(true);\n\n        setTimeout(() => {\n          setIsOpen(false);\n        }, 1500);\n    };\n\n    const handleDeletePost = () => {\n        httpDELETE(`/posts/${props.data.id}`).then(() => {});\n        // alert(`post by ${props.data.author} deleted`);\n        showModal();\n    }\n\n\n    return (\n        <article className={styles.post}>\n            <button className={styles.deleteBtn} onClick={handleDeletePost}>X</button>\n\n            <h3>{data.author}</h3>\n            <RelativeDate date={data.date}/>\n            <p>{data.text}</p>\n\n            {data.photo ? <img src={data.photo} alt={data.author} /> : <></> }\n\n            {modalIsOpen ? <Modal color=\"lightcoral\" message=\"Post deleted\" top=\"0\"/> \n                : <Modal color=\"lightcoral\" message=\"Post deleted\" top=\"-100px\"/>}\n        </article>\n    ); //non si può usare l'if in jsx ma si può usare l'operatore ternario\n    //per verificare se il post ha un'immagine ed eventualmente rendirizzarla\n};//in alternativa per condizioni più complesse si può creare una funzione con\n//l'if che ritorna qualcosa da renderizzare o qualcos'altro o niente, con un\n//fragment <></> che in react è un elemento \"vuoto\" solitamente placeholder.\n//per esempio:\n//const hasImage = (photo) => {\n//     if(photo) {\n//         return <img src={data.photo} alt={data.author} />\n//     } else {\n//         return <></>\n//     }\n// }\n\nexport default Post;","import { useState, useEffect } from \"react\";\nimport styles from \"./Home.module.scss\";\nimport FriendPreview from \"../../components/FriendPreview\";\nimport MessagePreview from \"../../components/MessagePreview\";\nimport Post from \"../../components/Post\";\n// import CreatePost from \"../../components/CreatePost\";\nimport { Link } from \"react-router-dom\";\nimport { http } from \"./../../libs/http.js\";\n\nconst friends = [];\n\nconst messages = [];\n\nconst posts = [];\n\nconst Home = () => {\n\n    const [allPosts, setAllPosts] = useState(posts);\n    const [messagesPreview, setMessagesPreview] = useState(messages);\n    const [friendsPreview, setFriendsPreview] = useState(friends);\n    //è come scrivere const friendPreview = [];\n    //ma più efficiente. Sarà una funzione monitorata\n    //da react, di cui friendPreview è il getter.\n\n    //Come buona abitudine se ho chiamato il getter \n    //friendsPreview chiamerò il setter setFriendsPreview.\n\n    //GETTER -> const friendPreview = []\n    //il getter costituisce il valore iniziale\n    //SETTER -> firenPreview = [...]\n    //Il setter cambia il valore dei dati del getter.\n\n    // fetch(\"https://edgemony-backend.herokuapp.com/friends?_limit=4\")\n    //     .then((response) => response.json())\n    //     .then((data) => console.log(data))\n    //così però la fetch viene eseguita due volte: dobbiamo \n    //importare l'hook useEffect per lavorare sugli \"eventi\" \n    //dell'evento (creazione, aggiornamento, fine evento...)\n\n    //Esegue il condice quando il componente è inizializzato\n    //E'equivalante a DOMContentLoaded ma per il componente.\n    //componentDidMount() era il vecchio nome della funzione\n    \n    //così aggiorniamo solo un elemento della pagina ma per\n    //farlo \"automaticamnte\" abbiamo dovuto crearci uno stato\n    //interno e settarlo con useEffect.\n    \n    useEffect(() => {\n        http(\"/friends?_limit=4\").then((data) => setFriendsPreview(data));\n\n        http(\"/messages?_limit=4\").then((data) => setMessagesPreview(data));\n\n        http(\"/posts\").then((data) => setAllPosts(data.reverse()));\n    }, [allPosts]); //AVANZATO: re-render ogni volta che si aggiunge/elimina un post\n\n    //così gli elementi vengono caricati man mano che le chiamate rispondono\n    //(hanno tempi diversi). Nel caso serva caricare tutto assieme e solo\n    //dopo renderizzare gli elementi si poteva usare:\n    //Promise.all([\n    //     http(\"/friends?_limit=4\"),\n    //     http(\"/messages?_limit=4\"),\n    //     http(\"/posts\")\n    // ]).then((data) => console.log(data[0]))\n    //Promise.all è un array di promises e restituisce data non singolarmente\n    //ma in un array indicizzato nell'ordine in cui sono state fatte le fetch\n\n    return (\n        <section className={styles.home}>\n            <h3>Benvenuto utente</h3>\n            <div className={styles.grid}>\n                <aside>\n                    {friendsPreview.map((friend, index) => (\n                        <FriendPreview key={index} data={friend}/>\n                    ))}                    \n                </aside>\n                <main>\n                    {/* <CreatePost /> */}\n                    \n                    <Link to=\"/new-post\">\n                        <button className={styles.createPostBtn}>Create a new post!</button>\n                    </Link>\n                    {allPosts.map((post, index) => (\n                        <Post key={index} data={post} />\n                    ))} \n                </main>\n                <aside>\n                    {messagesPreview.map((message, index) => (\n                        <MessagePreview key={index} data={message} />\n                    ))}\n                </aside>\n            </div>\n        </section>\n    ); //è più corretto assegnare alla key l'id del backend anziché\n};//quello generato da js dinamicamente perché è univoco.Es.post.id\n\nexport default Home;"],"sourceRoot":""}