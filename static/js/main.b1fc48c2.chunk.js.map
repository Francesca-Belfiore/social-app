{"version":3,"sources":["pages/Home/Home.module.scss","components/Header/Header.module.scss","components/CreatePost/CreatePost.module.scss","components/Post/Post.module.scss","components/Modal/Modal.module.scss","components/Footer/Footer.module.scss","components/FriendPreview/FriendPreview.module.scss","components/MessagePreview/MessagePreview.module.scss","pages/Messages/Messages.module.scss","pages/Friends/Friends.module.scss","components/Header/index.jsx","libs/http.js","components/Modal/index.jsx","components/CreatePost/index.jsx","pages/NewPost/index.jsx","components/Footer/index.jsx","components/FriendPreview/index.jsx","components/date.jsx","components/MessagePreview/index.jsx","components/Post/index.jsx","pages/Home/index.jsx","pages/Messages/index.jsx","pages/Friends/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Header","props","name","links","link","label","CheckActive","resolved","useResolvedPath","useMatch","path","pathname","end","styles","active","className","header","map","item","index","to","BASE_URL","http","resource","fetch","then","response","json","Modal","style","backgroundColor","color","message","CreatePost","useState","inputs","setInputs","inputChange","e","state","target","value","formPostObj","setFormPostOnj","modalIsOpen","setIsOpen","useEffect","author","text","date","Date","toISOString","photo","image","createPost","__author","onChange","type","id","placeholder","required","onClick","event","data","preventDefault","method","headers","body","JSON","stringify","console","log","setTimeout","cols","rows","NewPost","Footer","year","getFullYear","footer","FriendPreview","friend","src","alt","RelativeDate","formatDistance","addSuffix","locale","it","toLocaleTimeString","MessagePreview","sender","Post","post","deleteBtn","friends","messages","posts","Home","allPosts","setAllPosts","messagesPreview","setMessagesPreview","friendsPreview","setFriendsPreview","reverse","home","grid","createPostBtn","Messages","messagesList","setMessagesList","Friends","friendList","setFriendList","INIT_STATE","nav","reducer","action","App","useReducer","dispatch","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,KAAO,mBAAmB,cAAgB,4BAA4B,OAAS,uB,iBCA3HD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,yB,gBCA3DD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,SAAW,+B,gBCAzED,EAAOC,QAAU,CAAC,KAAO,mBAAmB,UAAY,0B,iBCAxDD,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,OAAS,gC,gBCA3BD,EAAOC,QAAU,CAAC,QAAU,kC,gBCA5BD,EAAOC,QAAU,CAAC,SAAW,6B,gBCA7BD,EAAOC,QAAU,CAAC,QAAU,2B,wLCyDbC,EAnDA,SAACC,GAIZ,IAAMC,EAAOD,EAAMC,MAAQ,MACrBC,EAAQF,EAAME,OAAS,CAAC,CAAEC,KAAM,GAAIC,MAAO,KAM3CC,EAAc,SAACF,GACjB,IAAMG,EAAWC,YAAgBJ,GAGjC,OAFcK,YAAS,CAAEC,KAAMH,EAASI,SAAUC,KAAK,IAExCC,IAAOC,OAAS,IAUnC,OACI,yBAAQC,UAAWF,IAAOG,OAA1B,UACI,6BAAKd,IACL,8BACI,6BACKC,EAAMc,KAAI,SAACC,EAAMC,GAAP,OACP,6BAQI,cAAC,IAAD,CAAMJ,UAAWT,EAAYY,EAAKd,MAAOgB,GAAIF,EAAKd,KAAlD,SAAyDc,EAAKb,SARzDc,c,yBCtC3BE,EAAW,yCAEXC,EAAO,SAACC,GAAD,OACTC,MAAMH,EAAWE,GAAUE,MAAK,SAACC,GAAD,OAAcA,EAASC,W,iBCQ5CC,EAJD,SAAC3B,GAAD,OACV,mBAAGc,UAAWF,IAAOe,MAAOC,MAAO,CAAEC,gBAAiB7B,EAAM8B,OAA5D,SAAsE9B,EAAM+B,WC4FjEC,EA/FI,WAOf,MAA6BC,mBAAS,IAAtC,mBAAQC,EAAR,KAAgBC,EAAhB,KACMC,EAAc,SAACC,GAAD,OAAOF,GAAU,SAAAG,GAAK,kCAASA,GAAT,kBAAiBD,EAAEE,OAAOtC,KAAOoC,EAAEE,OAAOC,YAKpF,EAAwCP,mBAAS,IAAjD,mBAAQQ,EAAR,KAAqBC,EAArB,KAQA,EAAiCT,oBAAS,GAA1C,mBAAOU,EAAP,KAAoBC,EAApB,KA6BA,OAVAC,qBAAU,WACNH,EAAe,CACXI,OAAQZ,EAAOY,OACfC,KAAMb,EAAOH,QACbiB,MAAM,IAAIC,MAAOC,cACjBC,MAAOjB,EAAOkB,UAEnB,CAAClB,EAAOY,OAAQZ,EAAOkB,MAAOlB,EAAOH,UAIpC,qBAAKjB,UAAWF,IAAOyC,WAAvB,SACI,iCAEKV,EAAc,cAAC,EAAD,CAAOb,MAAM,eAAeC,QAAQ,kBAAoB,6BAEvE,sBAAKjB,UAAWF,IAAO0C,SAAvB,UACI,uBACId,MAAON,EAAOY,QAAU,GACxBS,SAAUnB,EACVoB,KAAK,OACLvD,KAAK,SACLwD,GAAG,SACHC,YAAY,SACZC,UAAQ,IAEZ,uBACInB,MAAON,EAAOkB,OAAS,GACvBG,SAAUnB,EACVoB,KAAK,OACLvD,KAAK,QACLwD,GAAG,QACHC,YAAY,cAEhB,wBACIF,KAAK,SACLI,QA5CE,SAACC,GFhCV,IAAWC,EEiCpBD,EAAME,iBFjCcD,EEkCDrB,EFjCvBlB,MAAMH,EEiCO,SFjCc,CACvB4C,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAE3BC,KAAMC,KAAKC,UAAUN,KACtBtC,MAAK,SAACC,GAAD,OAAcA,EAASC,UE6B3B2C,QAAQC,IAAI7B,GAXZG,GAAU,GAEV2B,YAAW,WACT3B,GAAU,KACT,OA8CS,qBAMJ,0BACIJ,MAAON,EAAOH,SAAW,GACzBwB,SAAUnB,EACVnC,KAAK,UACLwD,GAAG,UACHe,KAAK,KACLC,KAAK,KACLf,YAAY,UACZC,UAAQ,UCvFbe,EAJC,WACZ,OAAO,cAAC,EAAD,K,iBCoBIC,EArBA,WAEX,IAAMC,GAAO,IAAI3B,MAAO4B,cAExB,OACI,yBAAQ/D,UAAWF,IAAOkE,OAA1B,UAUI,uBACA,8CAAiBF,S,kCCFdG,EAdO,SAAC/E,GACnB,IAAM8D,EAAO9D,EAAM8D,MAAQ,CACvB7D,KAAM,SACNkD,MAAO,oDAGX,OACI,sBAAKrC,UAAWF,IAAOoE,OAAvB,UACI,qBAAKC,IAAKnB,EAAKX,MAAO+B,IAAKpB,EAAK7D,OAChC,4BAAI6D,EAAK7D,W,iCCCNkF,EATM,SAAC,GAAD,IAAEnC,EAAF,EAAEA,KAAF,OACjB,4BACKA,EACG,kCACKoC,YAAe,IAAInC,KAAKD,GAAO,IAAIC,KAAQ,CAACoC,WAAW,EAAMC,OAAQC,MAD1E,MACmF,IAAItC,KAAKD,GAAMwC,wBACvF,gCCYRC,EAhBQ,SAACzF,GACpB,IAAM8D,EAAO9D,EAAM8D,MAAQ,CACvBf,KAAM,cACNC,KAAM,IAAIC,KACVyC,OAAQ,QAGZ,OACI,sBAAK5E,UAAWF,IAAOmB,QAAvB,UACI,6BAAK+B,EAAK4B,SACV,cAAC,EAAD,CAAc1C,KAAMc,EAAKd,OACzB,4BAAIc,EAAKf,W,iBC2CN4C,EApDF,SAAC3F,GACV,IAAM8D,EAAO9D,EAAM8D,MAAQ,CACvBhB,OAAQ,OACRC,KAAM,OACNC,KAAM,IAAIC,KACVE,MACI,iKAIR,EAAiClB,oBAAS,GAA1C,mBAAOU,EAAP,KAAoBC,EAApB,KAgBA,OACI,0BAAS9B,UAAWF,IAAOgF,KAA3B,UACI,wBAAQ9E,UAAWF,IAAOiF,UAAWjC,QARpB,WRbV,IAACtC,KQcD,UAAD,OAAWtB,EAAM8D,KAAKL,IRbpClC,MAAMH,EAAWE,EAAU,CACvB0C,OAAQ,SACRC,QAAS,CAAE,eAAgB,sBAE5BzC,MAAK,SAACC,GAAD,OAAcA,EAASC,WQSWF,MAAK,eAR3CoB,GAAU,GAEV2B,YAAW,WACT3B,GAAU,KACT,OAWC,eAEA,6BAAKkB,EAAKhB,SACV,cAAC,EAAD,CAAcE,KAAMc,EAAKd,OACzB,4BAAIc,EAAKf,OAERe,EAAKX,MAAQ,qBAAK8B,IAAKnB,EAAKX,MAAO+B,IAAKpB,EAAKhB,SAAa,6BAE1DH,EAAc,cAAC,EAAD,CAAOb,MAAM,aAAaC,QAAQ,kBAAoB,iCCjC3E+D,EAAU,GAEVC,EAAW,GAEXC,EAAQ,GAkFCC,EAhFF,WAET,MAAgChE,mBAAS+D,GAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACA,EAA8ClE,mBAAS8D,GAAvD,mBAAOK,EAAP,KAAwBC,EAAxB,KACA,EAA4CpE,mBAAS6D,GAArD,mBAAOQ,EAAP,KAAuBC,EAAvB,KA+CA,OAnBA1D,qBAAU,WACNxB,EAAK,qBAAqBG,MAAK,SAACsC,GAAD,OAAUyC,EAAkBzC,MAE3DzC,EAAK,sBAAsBG,MAAK,SAACsC,GAAD,OAAUuC,EAAmBvC,MAE7DzC,EAAK,UAAUG,MAAK,SAACsC,GAAD,OAAUqC,EAAYrC,EAAK0C,gBAChD,CAACN,IAcA,0BAASpF,UAAWF,IAAO6F,KAA3B,UACI,kDACA,sBAAK3F,UAAWF,IAAO8F,KAAvB,UACI,gCACKJ,EAAetF,KAAI,SAACgE,EAAQ9D,GAAT,OAChB,cAAC,EAAD,CAA2B4C,KAAMkB,GAAb9D,QAG5B,iCAGI,cAAC,IAAD,CAAMC,GAAG,YAAT,SACI,wBAAQL,UAAWF,IAAO+F,cAA1B,kCAEHT,EAASlF,KAAI,SAAC4E,EAAM1E,GAAP,OACV,cAAC,EAAD,CAAkB4C,KAAM8B,GAAb1E,SAGnB,gCACKkF,EAAgBpF,KAAI,SAACe,EAASb,GAAV,OACjB,cAAC,EAAD,CAA4B4C,KAAM/B,GAAbb,e,iBClE9B0F,EAhBE,WACb,MAA0C3E,mBAAS,IAAnD,mBAAQ4E,EAAR,KAAsBC,EAAtB,KAMA,OAJAjE,qBAAU,WACNxB,EAAK,aAAaG,MAAK,SAACqF,GAAD,OAAkBC,EAAgBD,QAC1D,IAGC,qBAAK/F,UAAWF,IAAOgG,SAAvB,SACKC,EAAa7F,KAAI,SAACe,GAAD,OACd,cAAC,EAAD,CAAgB+B,KAAM/B,GAAcA,EAAQ0B,U,iBCM7CsD,EAhBC,WACZ,MAAsC9E,mBAAS,IAA/C,mBAAQ+E,EAAR,KAAoBC,EAApB,KAMA,OAJApE,qBAAU,WACNxB,EAAK,YAAYG,MAAK,SAACwF,GAAD,OAAgBC,EAAcD,QACrD,IAGC,qBAAKlG,UAAWF,IAAOmG,QAAvB,SACKC,EAAWhG,KAAI,SAACgE,GAAD,OACZ,cAAC,EAAD,CAAgBlB,KAAMkB,GAAaA,EAAOvB,UCQpDyD,EAAa,CACjBjH,KAAM,WACNkH,IAAK,CAEH,CAAEhH,KAAM,cAAeC,MAAO,QAC9B,CAAED,KAAM,WAAYC,MAAO,WAC3B,CAAED,KAAM,YAAaC,MAAO,aAC3BkG,eAAgB,IAGfc,EAAU,SAAC9E,EAAO+E,GACtB,MACO,gBADCA,EAAO7D,KAEJ,2BAAKlB,GAAZ,IAAmBrC,KAAM,aAGlBqC,GAoCEgF,OA/Bf,WACE,MAA0BC,qBAAWH,EAASF,GAA9C,mBAAO5E,EAAP,KAAckF,EAAd,KAWA,OACE,gCACE,cAAC,EAAD,CAAQvH,KAAMqC,EAAMrC,KAAMC,MAAOoC,EAAM6E,MAEvC,wBAAQvD,QAAS,kBAAM4D,EAAS,CAAChE,KAAK,iBAAtC,yBAGA,eAAC,IAAD,WACE,cAAC,IAAD,CAAO/C,KAAK,YAAYgH,QAAU,cAAC,EAAD,MAClC,cAAC,IAAD,CAAOhH,KAAK,cAAcgH,QAAU,cAAC,EAAD,MACpC,cAAC,IAAD,CAAOhH,KAAK,YAAYgH,QAAU,cAAC,EAAD,MAClC,cAAC,IAAD,CAAOhH,KAAK,WAAWgH,QAAU,cAAC,EAAD,SAGnC,cAAC,EAAD,QC1DSC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpG,MAAK,YAAkD,IAA/CqG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,GAAD,QAGJC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.b1fc48c2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__1JXvv\",\"grid\":\"Home_grid__sUtIT\",\"createPostBtn\":\"Home_createPostBtn__1BGTQ\",\"friend\":\"Home_friend__eOEhP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1v0yI\",\"active\":\"Header_active__3GX0s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"createPost\":\"CreatePost_createPost__3XCbM\",\"__author\":\"CreatePost___author__2lcbm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3hqZB\",\"deleteBtn\":\"Post_deleteBtn__1bIB2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__32mLz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__7dIj9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"FriendPreview_friend__3Gjby\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"MessagePreview_message__3j9dl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Messages\":\"Messages_Messages__3lm0z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Friends\":\"Friends_Friends__2IY9Z\"};","//Un componente è una funzione che ritorna un template jsx.\n//I componenti sono dei tag custom, pertanto html ci dà\n//già una linea guida su come costruire un componente.\n\nimport styles from \"./Header.module.scss\"\nimport { Link, useMatch, useResolvedPath } from \"react-router-dom\";\n\nconst Header = (props) => {\n//props è un oggetto che contiene tutti gli attributi\n//che vengono passati sul tag del componente.\n\n    const name = props.name || \"App\";\n    const links = props.links || [{ link: \"\", label: \"\" }];\n    //assegnazioni default in caso props non sia inizializzato\n    //così non genera contenuto utile ma evita errori e che si\n    //rompa l'app. Così si può togliere anche props dal return \n    //sotto nei nomi degli attributi (props.name, props.links).\n\n    const CheckActive = (link) => {\n        const resolved = useResolvedPath(link);\n        const match = useMatch({ path: resolved.pathname, end: true });\n\n        return match ? styles.active : \"\";\n    }; //gli hook di react funzionano solo dentro i componenti,\n    //per tantos criviamo checkActive in maiuscolo se no il linter\n    //(regole dello stile di codice) dà problemi perché non capisce\n    //di essere già all'interno di un componente (non vede contesto).\n\n    //Esiste un modo già incluso nella documentazione di react-router\n    //chiamato NavLink per fare il check se un link è attivo e stilarlo\n    //https://reactrouter.com/docs/en/v6/getting-started/tutorial#active-links\n\n    return (\n        <header className={styles.header}>\n            <h1>{name}</h1>\n            <nav>\n                <ul>\n                    {links.map((item, index) => (\n                        <li key={index}> \n                            {/*a livello di performance react ha\n                            bisogno di un id quando si itera una\n                            sequenza di elementi per distinguerli \n                            meglio. Visivamente non cambia niente\n                            se non far sparire l'errore in console.\n                            Ovviamente la key va messa nel tag più\n                            alto dell'elemento ripetuto.*/}\n                            <Link className={CheckActive(item.link)} to={item.link}>{item.label}</Link>\n                            {/*Il tag Link to è come un a href e viene\n                            usato da react-router-dom per link interni,\n                            a livello di html ritorna un tag a normale*/}\n                        </li>\n                    ))}\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default Header;\n//l'export default esporta un solo modulo e senza un nome \n//(il modulo esportato può poi essere importato anche con \n//un nome diverso. Es. nomi ripetuti). In questo caso si \n//può usare anche l'export nominale ma il lazy loading\n//richiede l'export default.\n\n//Il nome di un modulo esportato col default può essere\n//cambiato in ogni momento, mentre il nome di un modulo\n//esportato tra parentesi graffe può essere cambiato con\n//export modulo \"as\" nuovonome.","const BASE_URL = \"https://edgemony-backend.herokuapp.com\";\n\nconst http = (resource) =>\n    fetch(BASE_URL + resource).then((response) => response.json());\n\nconst httpPOST = (resource, data) =>\n    fetch(BASE_URL + resource, {\n        method: \"POST\",\n        headers: { \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n    }).then((response) => response.json());\n\nconst httpDELETE = (resource) =>\n    fetch(BASE_URL + resource, {\n        method: \"DELETE\",\n        headers: { \"Content-type\": \"application/json\",\n        },\n    }).then((response) => response.json());\n\nexport { http, httpPOST, httpDELETE };","//ESERCIZIO: BASE\n//modale che si scatena ogni volta che un messaggio viene creato/eliminato, con\n//due prop che passano il messaggio e il colore della modale es. azzurro, rosso.\n//opzionale: fare pure l'animazione.\n\nimport styles from \"./Modal.module.scss\";\n\nconst Modal = (props) => (\n    <p className={styles.Modal} style={{ backgroundColor: props.color }}>{props.message}</p>\n)\n\nexport default Modal;","import styles from \"./CreatePost.module.scss\"\nimport { httpPOST } from \"../../libs/http\";\nimport { useEffect, useState } from \"react\";\nimport Modal from \"../Modal\";\n\nconst CreatePost = () => {\n    //controlled components with hooks\n    //si applica ai form per passare gli input\n\n    //bisogna usare un usestate per ogni input\n\n    //AVANZATO\n    const [ inputs, setInputs] = useState({});\n    const inputChange = (e) => setInputs(state => ({...state, [e.target.name]: e.target.value}));\n    // const [ authorInput, setAuthorInput ] = useState(\"\");\n    // const [ imgInput, setImgInput ] = useState(\"\");\n    // const [ messageInput, setMessageInput ] = useState(\"\");\n\n    const [ formPostObj, setFormPostOnj ] = useState({});\n\n    // const handleAuthorInput = (event) => setAuthorInput(event.target.value);\n    // const handleImgInput = (event) => setImgInput(event.target.value);\n    // const handleMessageInput = (event) => setMessageInput(event.target.value);\n\n\n    //Esercizio: MODALE\n    const [modalIsOpen, setIsOpen] = useState(false);\n\n    function showModal() {\n        setIsOpen(true);\n\n        setTimeout(() => {\n          setIsOpen(false);\n        }, 1500);\n    };\n\n    //AL CLICK DEL SEND BUTTON\n    const handleSendBtn = (event) => {\n        event.preventDefault();\n        httpPOST(\"/posts\", formPostObj)\n        console.log(formPostObj);\n        // alert(\"post creato!\");\n        showModal();\n    }\n\n    useEffect(() => {\n        setFormPostOnj({\n            author: inputs.author,\n            text: inputs.message,\n            date: new Date().toISOString(),\n            photo: inputs.image,\n        })\n    }, [inputs.author, inputs.image, inputs.message])\n    //aggiorna lo stato solo quando cambiano le dipendenze tra parentesi quadre\n\n    return (\n        <div className={styles.createPost}>\n            <form>\n\n                {modalIsOpen ? <Modal color=\"lightskyblue\" message=\"Post created!\"/> : <></>}\n\n                <div className={styles.__author}>\n                    <input \n                        value={inputs.author || \"\"}\n                        onChange={inputChange} \n                        type=\"text\" \n                        name=\"author\" \n                        id=\"author\" \n                        placeholder=\"Author\" \n                        required\n                    />\n                    <input\n                        value={inputs.image || \"\"} \n                        onChange={inputChange}\n                        type=\"text\"\n                        name=\"image\"\n                        id=\"image\"\n                        placeholder=\"Image URL\" \n                    />\n                    <button \n                        type=\"submit\"\n                        onClick={handleSendBtn}\n                    >SEND\n                    </button>\n                </div>\n                <textarea \n                    value={inputs.message || \"\"} \n                    onChange={inputChange}\n                    name=\"message\"\n                    id=\"message\"\n                    cols=\"30\"\n                    rows=\"10\"\n                    placeholder=\"Message\"\n                    required>\n                </textarea>\n            </form>\n        </div>\n    );\n};\n\nexport default CreatePost;","import CreatePost from \"../../components/CreatePost\";\n\nconst NewPost = () => {\n    return <CreatePost/>;\n}\n\nexport default NewPost;","import styles from \"./Footer.module.scss\";\n\nconst Footer = () => {\n\n    const year = new Date().getFullYear();\n\n    return (\n        <footer className={styles.footer}> \n        {/*assegno una class con un bind per\n         importare il modulo css.\n         Scrivendo in questo modo anziché solo\n         className=\"footer\", webpack genera un\n         hash unico nel nome della classe in \n         quella sezione della pagina. Le classi\n         così create sono univoche e ciò evita\n         errori o conflitti nel caso di nomi di\n         classi ripetuti. Un po' come gli id*/}\n            <hr />\n            <p>Copyright FB {year}</p>\n        </footer>\n    );\n};\n\nexport default Footer;","import styles from \"./FriendPreview.module.scss\";\n\nconst FriendPreview = (props) => {\n    const data = props.data || {\n        name: \"Friend\",\n        photo: \"https://randomuser.me/api/portraits/women/59.jpg\",\n    };\n\n    return (\n        <div className={styles.friend}>\n            <img src={data.photo} alt={data.name}/>\n            <p>{data.name}</p>\n        </div>\n    );\n};\n\nexport default FriendPreview;","import { formatDistance } from \"date-fns\"; //formatta le date in modo \"umano\"\nimport { it } from \"date-fns/locale\"; //traduce le stringhe delle date in ita\n\nconst RelativeDate = ({date}) => (\n    <p> \n        {date ? \n            <small>\n                {formatDistance(new Date(date), new Date(), {addSuffix: true, locale: it})} - {new Date(date).toLocaleTimeString()}\n            </small> : <></> }\n    </p>\n);\n\nexport default RelativeDate;","import styles from \"./MessagePreview.module.scss\";\nimport RelativeDate from \"../date\";\n\n\nconst MessagePreview = (props) => {\n    const data = props.data || {\n        text: \"lorem ipsum\",\n        date: new Date(),\n        sender: \"User\"\n    };\n\n    return (\n        <div className={styles.message}>\n            <h5>{data.sender}</h5>\n            <RelativeDate date={data.date}/>\n            <p>{data.text}</p>\n        </div>\n    );\n};\n\nexport default MessagePreview;","import styles from \"./Post.module.scss\";\nimport RelativeDate from \"../date\";\nimport { httpDELETE } from \"../../libs/http\";\nimport Modal from \"../Modal\";\nimport { useState } from \"react\";\n\nconst Post = (props) => {\n    const data = props.data || {\n        author: \"User\",\n        text: \"text\",\n        date: new Date(), \n        photo: \n            \"https://images.unsplash.com/photo-1620481679288-0c3894901bcf?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=640&q=80\" \n    };\n\n    //MODAL\n    const [modalIsOpen, setIsOpen] = useState(false);\n\n    function showModal() {\n        setIsOpen(true);\n\n        setTimeout(() => {\n          setIsOpen(false);\n        }, 1500);\n    };\n\n    const handleDeletePost = () => {\n        httpDELETE(`/posts/${props.data.id}`).then(() => {});\n        // alert(`post by ${props.data.author} deleted`);\n        showModal();\n    }\n\n    return (\n        <article className={styles.post}>\n            <button className={styles.deleteBtn} onClick={handleDeletePost}>X</button>\n\n            <h3>{data.author}</h3>\n            <RelativeDate date={data.date}/>\n            <p>{data.text}</p>\n\n            {data.photo ? <img src={data.photo} alt={data.author} /> : <></> }\n\n            {modalIsOpen ? <Modal color=\"lightcoral\" message=\"Post deleted!\"/> : <></>}\n        </article>\n    ); //non si può usare l'if in jsx ma si può usare l'operatore ternario\n    //per verificare se il post ha un'immagine ed eventualmente rendirizzarla\n};//in alternativa per condizioni più complesse si può creare una funzione con\n//l'if che ritorna qualcosa da renderizzare o qualcos'altro o niente, con un\n//fragment <></> che in react è un elemento \"vuoto\" solitamente placeholder.\n//per esempio:\n//const hasImage = (photo) => {\n//     if(photo) {\n//         return <img src={data.photo} alt={data.author} />\n//     } else {\n//         return <></>\n//     }\n// }\n\nexport default Post;","import { useState, useEffect } from \"react\";\nimport styles from \"./Home.module.scss\";\nimport FriendPreview from \"../../components/FriendPreview\";\nimport MessagePreview from \"../../components/MessagePreview\";\nimport Post from \"../../components/Post\";\n// import CreatePost from \"../../components/CreatePost\";\nimport { Link } from \"react-router-dom\";\nimport { http } from \"./../../libs/http.js\";\n\nconst friends = [];\n\nconst messages = [];\n\nconst posts = [];\n\nconst Home = () => {\n\n    const [allPosts, setAllPosts] = useState(posts);\n    const [messagesPreview, setMessagesPreview] = useState(messages);\n    const [friendsPreview, setFriendsPreview] = useState(friends);\n    //è come scrivere const friendPreview = [];\n    //ma più efficiente. Sarà una funzione monitorata\n    //da react, di cui friendPreview è il getter.\n\n    //Come buona abitudine se ho chiamato il getter \n    //friendsPreview chiamerò il setter setFriendsPreview.\n\n    //GETTER -> const friendPreview = []\n    //il getter costituisce il valore iniziale\n    //SETTER -> firenPreview = [...]\n    //Il setter cambia il valore dei dati del getter.\n\n    // fetch(\"https://edgemony-backend.herokuapp.com/friends?_limit=4\")\n    //     .then((response) => response.json())\n    //     .then((data) => console.log(data))\n    //così però la fetch viene eseguita due volte: dobbiamo \n    //importare l'hook useEffect per lavorare sugli \"eventi\" \n    //dell'evento (creazione, aggiornamento, fine evento...)\n\n    //Esegue il condice quando il componente è inizializzato\n    //E'equivalante a DOMContentLoaded ma per il componente.\n    //componentDidMount() era il vecchio nome della funzione\n    \n    //così aggiorniamo solo un elemento della pagina ma per\n    //farlo \"automaticamnte\" abbiamo dovuto crearci uno stato\n    //interno e settarlo con useEffect.\n    \n    useEffect(() => {\n        http(\"/friends?_limit=4\").then((data) => setFriendsPreview(data));\n\n        http(\"/messages?_limit=4\").then((data) => setMessagesPreview(data));\n\n        http(\"/posts\").then((data) => setAllPosts(data.reverse()));\n    }, [allPosts]); //AVANZATO: re-render ogni volta che si aggiunge/elimina un post\n\n    //così gli elementi vengono caricati man mano che le chiamate rispondono\n    //(hanno tempi diversi). Nel caso serva caricare tutto assieme e solo\n    //dopo renderizzare gli elementi si poteva usare:\n    //Promise.all([\n    //     http(\"/friends?_limit=4\"),\n    //     http(\"/messages?_limit=4\"),\n    //     http(\"/posts\")\n    // ]).then((data) => console.log(data[0]))\n    //Promise.all è un array di promises e restituisce data non singolarmente\n    //ma in un array indicizzato nell'ordine in cui sono state fatte le fetch\n\n    return (\n        <section className={styles.home}>\n            <h3>Benvenuto utente</h3>\n            <div className={styles.grid}>\n                <aside>\n                    {friendsPreview.map((friend, index) => (\n                        <FriendPreview key={index} data={friend}/>\n                    ))}                    \n                </aside>\n                <main>\n                    {/* <CreatePost /> */}\n                    \n                    <Link to=\"/new-post\">\n                        <button className={styles.createPostBtn}>Create a new post!</button>\n                    </Link>\n                    {allPosts.map((post, index) => (\n                        <Post key={index} data={post} />\n                    ))} \n                </main>\n                <aside>\n                    {messagesPreview.map((message, index) => (\n                        <MessagePreview key={index} data={message} />\n                    ))}\n                </aside>\n            </div>\n        </section>\n    ); //è più corretto assegnare alla key l'id del backend anziché\n};//quello generato da js dinamicamente perché è univoco.Es.post.id\n\nexport default Home;","import { useEffect, useState } from \"react\";\nimport { http } from \"./../../libs/http\";\nimport MessagePreview from \"./../../components/MessagePreview\"\nimport styles from \"./Messages.module.scss\";\n\nconst Messages = () => {\n    const [ messagesList, setMessagesList ] = useState([]);\n\n    useEffect(() => {\n        http(\"/messages\").then((messagesList) => setMessagesList(messagesList));\n    }, []);\n\n    return (\n        <div className={styles.Messages}>\n            {messagesList.map((message) => (\n                <MessagePreview data={message} key={message.id}/>\n            ))}\n        </div>\n    );\n};\n\nexport default Messages;","import { useEffect, useState } from \"react\";\nimport { http } from \"./../../libs/http\"; \nimport FriendsPreview from \"./../../components/FriendPreview\"\nimport styles from \"./Friends.module.scss\";\n\nconst Friends = () => {\n    const [ friendList, setFriendList ] = useState([]);\n\n    useEffect(() => {\n        http(\"/friends\").then((friendList) => setFriendList(friendList));\n    }, []);\n\n    return (\n        <div className={styles.Friends}>\n            {friendList.map((friend) => (\n                <FriendsPreview data={friend} key={friend.id}/>\n            ))}\n        </div>\n    );\n};\n\nexport default Friends;","import './App.css';\nimport Header from './components/Header/index.jsx';\nimport NewPost from './pages/NewPost';\nimport Footer from './components/Footer/index.jsx';\n//viene risolto in quattro modi:\n//- ha trovato ./components/Footer.js\n//- ha trovato ./components/Footer.jsx\n//- ha trovato ./components/Footer/index.js\n//- ha trovato ./components/Footer/index.jsx\n//scrivere un componente in js o jsx non cambia nulla\n//a livello di funzionalità, ma scrivere jsx lo rende\n//riconoscibile e distinguibile dalla logica ad occhio\n\nimport { Routes, Route } from \"react-router-dom\"; \n//libreria per creare route lato client (come avevamo fatto con #)\n//il resto si importa sull'index.js principale che racchiude l'app.\n\nimport Home from \"./pages/Home/index.jsx\";\nimport Messages from \"./pages/Messages\";\nimport Friends from \"./pages/Friends\";\nimport { useReducer } from 'react';\n\n\nconst INIT_STATE = {\n  name: \"Feisbrut\",\n  nav: [\n    // { link: \"/new-post\", label: \"Create new post\"},\n    { link: \"/social-app\", label: \"Home\"},\n    { link: \"/friends\", label: \"Friends\"},\n    { link: \"/messages\", label: \"Messages\"},\n  ], friendsPreview: []\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"change-name\":\n      return { ...state, name: \"Feisbell\" }; \n      //creo un nuovo state col nome cambiato\n    default:\n      return state;\n      //ritorno lo stato per com'era\n  }\n};\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, INIT_STATE);\n  //useReducer è come useState ma esplicito\n  //il dispatch fa partire l'evento\n  //il reducer è come se fosse un event listener\n  //e contiene la logica per cambiare lo stato\n  //lo stato contiene i dati da visualizzare\n\n  //l'event listener su react non funziona perché non c'è il DOM\n  //c'è un hook di react chiamato useRef che permette di lavorare\n  //con un riferimento dentro al DOM per poterlo manipolare.\n\n  return (\n    <div>\n      <Header name={state.name} links={state.nav}/>\n\n      <button onClick={() => dispatch({type:\"change-name\"})}>Cambia nome</button>\n      {/* esempio bottone che cambia titolo alla pagina con useReducer */}\n      \n      <Routes>\n        <Route path=\"/new-post\" element={ <NewPost/> }/>\n        <Route path=\"/social-app\" element={ <Home/> }/>\n        <Route path=\"/messages\" element={ <Messages/> }/>\n        <Route path=\"/friends\" element={ <Friends/> }/>\n      </Routes>\n\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}