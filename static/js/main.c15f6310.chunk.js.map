{"version":3,"sources":["pages/Home/Home.module.scss","components/Header/Header.module.scss","components/Footer/Footer.module.scss","components/FriendPreview/FriendPreview.module.scss","components/MessagePreview/MessagePreview.module.scss","components/Post/Post.module.scss","components/Header/index.jsx","components/Footer/index.jsx","components/FriendPreview/index.jsx","components/date.jsx","components/MessagePreview/index.jsx","components/Post/index.jsx","libs/http.js","pages/Home/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Header","props","name","links","link","label","className","styles","header","map","item","index","href","Footer","year","Date","getFullYear","footer","FriendPreview","data","photo","friend","src","alt","RelativeDate","date","formatDistance","addSuffix","locale","it","toLocaleTimeString","MessagePreview","text","sender","message","Post","author","post","http","resource","fetch","then","response","json","friends","messages","posts","Home","useState","allPosts","setAllPosts","messagesPreview","setMessagesPreview","friendsPreview","setFriendsPreview","useEffect","home","grid","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c15f6310.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__1JXvv\",\"grid\":\"Home_grid__sUtIT\",\"friend\":\"Home_friend__eOEhP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1v0yI\",\"active\":\"Header_active__3GX0s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__7dIj9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"FriendPreview_friend__3Gjby\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"MessagePreview_message__3j9dl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3hqZB\"};","//Un componente è una funzione che ritorna un template jsx.\n//I componenti sono dei tag custom, pertanto html ci dà\n//già una linea guida su come costruire un componente.\n\nimport styles from \"./Header.module.scss\"\n\nconst Header = (props) => {\n//props è un oggetto che contiene tutti gli attributi\n//che vengono passati sul tag del componente.\n\n    const name = props.name || \"App\";\n    const links = props.links || [{ link: \"\", label: \"\" }];\n    //assegnazioni default in caso props non sia inizializzato\n    //così non genera contenuto utile ma evita errori e che si\n    //rompa l'app. Così si può togliere anche props dal return \n    //sotto nei nomi degli attributi (props.name, props.links).\n\n    return (\n        <header className={styles.header}>\n            <h1>{name}</h1>\n            <nav>\n                <ul>\n                    {links.map((item, index) => (\n                        <li key={index}> \n                            {/*a livello di performance react ha\n                            bisogno di un id quando si itera una\n                            sequenza di elementi per distinguerli \n                            meglio. Visivamente non cambia niente\n                            se non far sparire l'errore in console.\n                            Ovviamente la key va messa nel tag più\n                            alto dell'elemento ripetuto.*/}\n                            <a className=\"active\" href={item.link}>{item.label}</a>\n                        </li>\n                    ))}\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default Header;\n//l'export default esporta un solo modulo e senza un nome \n//(il modulo esportato può poi essere importato anche con \n//un nome diverso. Es. nomi ripetuti). In questo caso si \n//può usare anche l'export nominale ma il lazy loading\n//richiede l'export default.\n\n//Il nome di un modulo esportato col default può essere\n//cambiato in ogni momento, mentre il nome di un modulo\n//esportato tra parentesi graffe può essere cambiato con\n//export modulo \"as\" nuovonome.","import styles from \"./Footer.module.scss\";\n\nconst Footer = () => {\n\n    const year = new Date().getFullYear();\n\n    return (\n        <footer className={styles.footer}> \n        {/*assegno una class con un bind per\n         importare il modulo css.\n         Scrivendo in questo modo anziché solo\n         className=\"footer\", webpack genera un\n         hash unico nel nome della classe in \n         quella sezione della pagina. Le classi\n         così create sono univoche e ciò evita\n         errori o conflitti nel caso di nomi di\n         classi ripetuti. Un po' come gli id*/}\n            <hr />\n            <p>Copyright FB {year}</p>\n        </footer>\n    );\n};\n\nexport default Footer;","import styles from \"./FriendPreview.module.scss\";\n\nconst FriendPreview = (props) => {\n    const data = props.data || {\n        name: \"Friend\",\n        photo: \"https://randomuser.me/api/portraits/women/59.jpg\",\n    };\n\n    return (\n        <div className={styles.friend}>\n            <img src={data.photo} alt={data.name}/>\n            <p>{data.name}</p>\n        </div>\n    );\n};\n\nexport default FriendPreview;","import { formatDistance } from \"date-fns\"; //formatta le date in modo \"umano\"\nimport { it } from \"date-fns/locale\"; //traduce le stringhe delle date in ita\n\nconst RelativeDate = ({date}) => (\n    <p>\n        <small>\n            {formatDistance(new Date(date), new Date(), {addSuffix: true, locale: it})} - {new Date(date).toLocaleTimeString()}\n        </small>\n    </p>\n);\n\nexport default RelativeDate;","import styles from \"./MessagePreview.module.scss\";\nimport RelativeDate from \"../date\";\n\n\nconst MessagePreview = (props) => {\n    const data = props.data || {\n        text: \"lorem ipsum\",\n        date: new Date(),\n        sender: \"User\"\n    };\n\n    return (\n        <div className={styles.message}>\n            <h5>{data.sender}</h5>\n            <RelativeDate date={data.date}/>\n            <p>{data.text}</p>\n        </div>\n    );\n};\n\nexport default MessagePreview;","import styles from \"./Post.module.scss\";\nimport RelativeDate from \"../date\";\n\nconst Post = (props) => {\n    const data = props.data || {\n        author: \"User\",\n        text: \"text\",\n        date: new Date(), \n        photo: \n            \"https://images.unsplash.com/photo-1620481679288-0c3894901bcf?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=640&q=80\" \n    };\n\n    return (\n        <article className={styles.post}>\n            <h3>{data.author}</h3>\n            <RelativeDate date={data.date}/>\n            <p>{data.text}</p>\n\n            {data.photo ? <img src={data.photo} alt={data.author} /> : <></> }\n        </article>\n    ); //non si può usare l'if in jsx ma si può usare l'operatore ternario\n    //per verificare se il post ha un'immagine ed eventualmente rendirizzarla\n};//in alternativa per condizioni più complesse si può creare una funzione con\n//l'if che ritorna qualcosa da renderizzare o qualcos'altro o niente, con un\n//fragment <></> che in react è un elemento \"vuoto\" solitamente placeholder.\n//per esempio:\n//const hasImage = (photo) => {\n//     if(photo) {\n//         return <img src={data.photo} alt={data.author} />\n//     } else {\n//         return <></>\n//     }\n// }\n\nexport default Post;","const BASE_URL = \"https://edgemony-backend.herokuapp.com\";\n\nconst http = (resource) =>\n    fetch(BASE_URL + resource).then((response) => response.json());\n\nexport { http };","import { useState, useEffect } from \"react\";\nimport styles from \"./Home.module.scss\";\nimport FriendPreview from \"../../components/FriendPreview\";\nimport MessagePreview from \"../../components/MessagePreview\";\nimport Post from \"../../components/Post\";\nimport { http } from \"./../../libs/http.js\";\n\nconst friends = [];\n\nconst messages = [];\n\nconst posts = [];\n\nconst Home = () => {\n\n    const [allPosts, setAllPosts] = useState(posts);\n    const [messagesPreview, setMessagesPreview] = useState(messages);\n    const [friendsPreview, setFriendsPreview] = useState(friends);\n    //è come scrivere const friendPreview = [];\n    //ma più efficiente. Sarà una funzione monitorata\n    //da react, di cui friendPreview è il getter.\n\n    //Come buona abitudine se ho chiamato il getter \n    //friendsPreview chiamerò il setter setFriendsPreview.\n\n    //GETTER -> const friendPreview = []\n    //il getter costituisce il valore iniziale\n    //SETTER -> firenPreview = [...]\n    //Il setter cambia il valore dei dati del getter.\n\n    // fetch(\"https://edgemony-backend.herokuapp.com/friends?_limit=4\")\n    //     .then((response) => response.json())\n    //     .then((data) => console.log(data))\n    //così però la fetch viene eseguita due volte: dobbiamo \n    //importare l'hook useEffect per lavorare sugli \"eventi\" \n    //dell'evento (creazione, aggiornamento, fine evento...)\n\n    //Esegue il condice quando il componente è inizializzato\n    //E'equivalante a DOMContentLoaded ma per il componente.\n    //componentDidMount() era il vecchio nome della funzione\n    \n    //così aggiorniamo solo un elemento della pagina ma per\n    //farlo \"automaticamnte\" abbiamo dovuto crearci uno stato\n    //interno e settarlo con useEffect.\n    useEffect(() => {\n        http(\"/friends?_limit=4\").then((data) => setFriendsPreview(data));\n\n        http(\"/messages?_limit=4\").then((data) => setMessagesPreview(data));\n\n        http(\"/posts\").then((data) => setAllPosts(data));\n    }, []);\n\n    //così gli elementi vengono caricati man mano che le chiamate rispondono\n    //(hanno tempi diversi). Nel caso serva caricare tutto assieme e solo\n    //dopo renderizzare gli elementi si poteva usare:\n    //Promise.all([\n    //     http(\"/friends?_limit=4\"),\n    //     http(\"/messages?_limit=4\"),\n    //     http(\"/posts\")\n    // ]).then((data) => console.log(data[0]))\n    //Promise.all è un array di promises e restituisce data non singolarmente\n    //ma in un array indicizzato nell'ordine in cui sono state fatte le fetch\n\n    return (\n        <section className={styles.home}>\n            <h3>Benvenuto utente</h3>\n            <div className={styles.grid}>\n                <aside>\n                    {friendsPreview.map((friend, index) => (\n                        <FriendPreview key={index} data={friend}/>\n                    ))}                    \n                </aside>\n                <main>\n                    {allPosts.map((post, index) => (\n                        <Post key={index} data={post} />\n                    ))}\n                </main>\n                <aside>\n                    {messagesPreview.map((message, index) => (\n                        <MessagePreview key={index} data={message} />\n                    ))}\n                </aside>\n            </div>\n        </section>\n    );\n};\n\nexport default Home;","import './App.css';\nimport Header from './components/Header/index.jsx';\nimport Footer from './components/Footer/index.jsx';\n//viene risolto in quattro modi:\n//- ha trovato ./components/Footer.js\n//- ha trovato ./components/Footer.jsx\n//- ha trovato ./components/Footer/index.js\n//- ha trovato ./components/Footer/index.jsx\n\n//scrivere un componente in js o jsx non cambia nulla\n//a livello di funzionalità, ma scrivere jsx lo rende\n//riconoscibile e distinguibile dalla logica ad occhio\n\nimport Home from \"./pages/Home/index.jsx\";\n\n\nfunction App() {\n  const name = \"Feisbrut\";\n  const nav = [\n    { link: \"/home\", label: \"Home\"},\n    { link: \"/friends\", label: \"Friends\"},\n    { link: \"/messages\", label: \"Messages\"},\n];\n\n  return (\n    <div>\n      <Header name={name} links={nav}/>\n      <Home/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}